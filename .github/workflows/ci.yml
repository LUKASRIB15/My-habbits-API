name: "CI"

on:
  push:

jobs:
  build:
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js | Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate Tag
        id: generate_tag
        run: |
          SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
          echo "sha=${SHA}" >> $GITHUB_OUTPUT

      - name: Login with Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: lukasrib15dev/my-habbits:${{ steps.generate_tag.outputs.sha }},lukasrib15dev/my-habbits:latest
  
  tests:
      name: Run Tests 
      runs-on: ubuntu-latest
      container: node:20-bookworm-slim

      services:
        postgresDB:
          image: postgres
          env:
            POSTGRES_USER: user
            POSTGRES_PASSWORD: password
            POSTGRES_DB: db
          ports:
            - 5432:5432

      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Set up Node.js | Node 20
          uses: actions/setup-node@v4
          with:
            node-version: 20

        - name: Install pnpm manager
          run: npm install -g pnpm

        - name: Install dependencies
          run: pnpm install
  
        - name: Run Unit Tests
          run: pnpm run test

        - name: Generate Prisma Client
          env:
            DATABASE_URL: postgresql://user:password@postgresDB:5432/db?schema=public
          run: pnpm prisma generate

        - name: Run Migrations
          env:
            DATABASE_URL: postgresql://user:password@postgresDB:5432/db?schema=public
          run: pnpm prisma migrate deploy

        # - name: Run End-to-End Tests on the Docker Image  # Executa testes E2E na imagem gerada
        #   run: |
        #     pnpm run test:e2e
        #     docker-compose down